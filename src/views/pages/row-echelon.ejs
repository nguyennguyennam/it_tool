<div class="font-poppins flex flex-col items-center gap-6 p-3">
    <h1
        class="bg-gradient-to-r from-cadillac to-bashful bg-clip-text text-3xl font-bold text-transparent dark:from-cotton-candy dark:to-cadillac"
    >
        Row Echelon Form
    </h1>

    <p class="text-center text-gray-700 dark:text-gray-300">
        Reduce a matrix down to the row echelon form or even the reduced row
        echelon form.
    </p>

    <div class="w-full">
        <div class="mb-4">
            <label for="rowsInput" class="block text-gray-700 dark:text-gray-300 font-semibold mb-2"
                ><strong>Rows:</strong></label
            >
            <input
                type="number"
                id="rowsInput"
                value="3"
                min="1"
                class="h-12 w-full rounded-md bg-zinc-300 px-4 py-2 font-normal ring-2 ring-transparent duration-200 outline-none placeholder:opacity-50 focus:ring-bashful hover:ring-bashful/50 dark:bg-zinc-700 dark:text-white dark:focus:ring-cotton-candy dark:hover:ring-cotton-candy/50 dark:border-zinc-300"
            />
        </div>

        <div class="mb-4">
            <label for="colsInput" class="block text-gray-700 dark:text-gray-300 font-semibold mb-2"
                ><strong>Columns:</strong></label
            >
            <input
                type="number"
                id="colsInput"
                value="3"
                min="1"
                class="h-12 w-full rounded-md bg-zinc-300 px-4 py-2 font-normal ring-2 ring-transparent duration-200 outline-none placeholder:opacity-50 focus:ring-bashful hover:ring-bashful/50 dark:bg-zinc-700 dark:text-white dark:focus:ring-cotton-candy dark:hover:ring-cotton-candy/50 dark:border-zinc-300"
            />
        </div>

        <div class="mb-4">
            <button
                id="createMatrixBtn"
                class="bg-bashful hover:bg-transparent text-pearl border-2 border-bashful dark:bg-cotton-candy dark:hover:bg-transparent dark:text-black dark:border-cotton-candy flex w-full cursor-pointer items-center justify-center rounded-md px-4 py-2 font-semibold duration-200"
            >
                Create Matrix
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 -960 960 960"
                    class="ml-2 h-5 w-5"
                >
                    <path
                        d="M160-240v-80h80v80h80v80h-80v80h-80v-80h-80v-80h80Zm80-160v-80h400v80H240Zm0-160v-80h400v80H240Zm0-160v-80h400v80H240Z"
                    />
                </svg>
            </button>
        </div>

        <div id="matrixInputContainer" class="space-y-2">
        </div>

        <div class="mt-6 text-center">
            <button
                id="reduceMatrixBtn"
                class="bg-bashful hover:bg-transparent text-pearl border-2 border-bashful dark:bg-cotton-candy dark:hover:bg-transparent dark:text-black dark:border-cotton-candy flex w-full cursor-pointer items-center justify-center rounded-md px-4 py-2 font-semibold duration-200"
            >
                Reduce Matrix
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 -960 960 960"
                    class="ml-2 h-5 w-5"
                >
                    <path
                        d="M120-160v-640h720v640H120Zm80-80h560v-480H200v480Zm400-560v-80h-400v80h400Zm0-160v-80h-400v80h400Zm0-160v-80h-400v80h400Z"
                    />
                </svg>
            </button>
        </div>

        <div id="reductionResult" class="space-y-6 mt-8">
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#createMatrixBtn').click(function () {
            const rows = parseInt($('#rowsInput').val());
            const cols = parseInt($('#colsInput').val());
            const matrixInputContainer = $('#matrixInputContainer');
            matrixInputContainer.empty();

            if (isNaN(rows) || isNaN(cols) || rows <= 0 || cols <= 0) {
                matrixInputContainer.html(
                    `<p class="text-red-500 font-semibold dark:text-red-400">Please enter valid dimensions.</p>`
                );
                return;
            }

            for (let i = 0; i < rows; i++) {
                const rowDiv = $('<div class="flex gap-2"></div>');
                for (let j = 0; j < cols; j++) {
                    const input = $(`
                        <input
                            type="number"
                            class="w-16 h-12 rounded-md bg-zinc-300 px-2 py-1 font-normal ring-2 ring-transparent duration-200 outline-none placeholder:opacity-50 focus:ring-bashful hover:ring-bashful/50 dark:bg-zinc-700 dark:text-white dark:focus:ring-cotton-candy dark:hover:ring-cotton-candy/50 dark:border-zinc-300"
                            placeholder="a${i + 1}${j + 1}"
                        />
                    `);
                    rowDiv.append(input);
                }
                matrixInputContainer.append(rowDiv);
            }
        });

        $('#reduceMatrixBtn').click(function () {
            const rows = parseInt($('#rowsInput').val());
            const cols = parseInt($('#colsInput').val());
            const matrix = [];
            let hasError = false;

            $('#matrixInputContainer').children('div').each(function (i) {
                const row = [];
                $(this)
                    .children('input')
                    .each(function (j) {
                        const value = parseFloat($(this).val());
                        if (isNaN(value)) {
                            $('#reductionResult').html(
                                `<p class="text-red-500 font-semibold dark:text-red-400">Please enter valid numbers in the matrix.</p>`
                            );
                            hasError = true;
                            return false; // Break out of inner loop
                        }
                        row.push(value);
                    });
                if (hasError) return false; // Break out of outer loop
                matrix.push(row);
            });

            if (hasError) return;

            const rrefMatrix = reducedRowEchelonForm(matrix);
            const resultDiv = $('#reductionResult');
            resultDiv.empty();

            if (rrefMatrix) {
                const resultHTML = $(`
                    <div class="rounded-md bg-zinc-300 px-4 py-2 dark:bg-zinc-700">
                        <p class="font-semibold text-gray-700 dark:text-gray-300 mb-2">Reduced Row Echelon Form:</p>
                        <pre class="whitespace-pre-wrap break-words text-lg font-mono text-gray-900 dark:text-white">${formatMatrix(
                            rrefMatrix
                        )}</pre>
                        <button
                            id="copyResultBtn"
                            class="group relative mt-4 shrink-0 cursor-pointer! fill-zinc-950 hover:fill-zinc-950/50 dark:fill-pearl dark:hover:fill-pearl/50"
                        >
                            <span
                                class="absolute bottom-0 left-1/2 z-10 hidden -translate-x-1/2 -translate-y-full items-center justify-center rounded-md bg-zinc-500 px-4 py-2 font-semibold uppercase text-pearl group-hover:flex dark:bg-pearl dark:text-black"
                                >Copy</span
                            >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 -960 960 960"
                                class="size-6"
                            >
                                <path
                                    d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"
                                />
                            </svg>
                        </button>
                    </div>
                `);
                resultDiv.append(resultHTML);

                $('#copyResultBtn').click(() => {
                    navigator.clipboard.writeText(formatMatrix(rrefMatrix));
                    $('#copyResultBtn > span').text("Copied!");
                    setTimeout(() => {
                        $('#copyResultBtn > span').text("Copy");
                    }, 3000);
                });
            } else {
                resultDiv.html(
                    `<p class="text-red-500 font-semibold dark:text-red-400">Error during matrix reduction.</p>`
                );
            }
        });

        function reducedRowEchelonForm(matrix) {
            const rows = matrix.length;
            const cols = matrix[0].length;
            let lead = 0;

            for (let r = 0; r < rows; r++) {
                if (lead >= cols) {
                    return matrix;
                }
                let i = r;
                while (matrix[i][lead] === 0) {
                    i++;
                    if (i === rows) {
                        i = r;
                        lead++;
                        if (lead === cols) {
                            return matrix;
                        }
                    }
                }
                // Swap rows i and r
                [matrix[r], matrix[i]] = [matrix[i], matrix[r]];
                let lv = matrix[r][lead];
                if (lv !== 0) {
                    // Divide row r by lv to make the leading entry 1
                    matrix[r] = matrix[r].map(val => val / lv);
                }
                for (let i = 0; i < rows; i++) {
                    if (i !== r) {
                        let factor = matrix[i][lead];
                        matrix[i] = matrix[i].map((val, j) => val - factor * matrix[r][j]);
                    }
                }
                lead++;
            }
            return matrix;
        }

        function formatMatrix(matrix) {
            return matrix.map((row) => row.join("\t")).join("\n");
        }
    });
</script>