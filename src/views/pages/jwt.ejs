<div class="flex w-full max-w-4xl flex-col items-center justify-center gap-8">
  <div class="flex w-full flex-col gap-2 text-center">
    <h1
      class="dark:from-cotton-candy dark:to-cadillac from-cadillac to-bashful bg-gradient-to-r bg-clip-text text-3xl font-bold text-transparent"
    >
      JWT Parser
    </h1>
    <p class="w-full">
      Try parsing and verifying signed claims packaged in a JSON Web Token, a
      very common tool used for authentication on the web.
    </p>
  </div>

  <div class="flex w-full flex-col gap-4">
    <label class="flex flex-col gap-2 font-semibold">
      JWT Token
      <textarea
        id="jwt-token"
        class="h-32 resize-none rounded-md bg-zinc-300 px-4 py-2 font-normal ring-2 ring-transparent duration-200 outline-none placeholder:opacity-50 hover:ring-pink-500/50 focus:ring-pink-500 dark:bg-zinc-700 dark:hover:ring-purple-500/50 dark:focus:ring-purple-500"
        placeholder="Paste your JWT here..."
      ></textarea>
    </label>

    <button
      id="parse-jwt"
      class="from-cadillac to-bashful dark:from-cotton-candy dark:to-cadillac text-pearl cursor-pointer self-end rounded-md bg-gradient-to-r px-4 py-2 font-semibold duration-200 hover:bg-transparent dark:border-lime-500 dark:text-black dark:hover:bg-transparent"
    >
      Parse JWT
    </button>
  </div>

  <div class="flex w-full flex-col gap-4">
    <strong class="text-xl font-semibold">Parsed JWT</strong>

    <div class="flex flex-col gap-2">
      <h3 class="font-semibold">Header</h3>
      <div
        class="flex items-center justify-between rounded-md bg-zinc-300 p-4 dark:bg-zinc-700"
      >
        <pre id="jwt-header" class="json-viewer"></pre>
        <button
          data-copy-target="jwt-header"
          class="copy-button dark:fill-pearl dark:hover:fill-pearl/50 group relative shrink-0 cursor-pointer! fill-zinc-950 hover:fill-zinc-950/50"
        >
          <span
            class="dark:bg-pearl text-pearl absolute bottom-0 left-1/2 z-10 hidden -translate-x-1/2 -translate-y-full items-center justify-center rounded-md bg-zinc-500 px-4 py-2 font-semibold uppercase group-hover:flex dark:text-black"
            >Copy</span
          >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 -960 960 960"
            class="size-6"
          >
            <path
              d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"
            />
          </svg>
        </button>
      </div>
    </div>

    <div class="flex flex-col gap-2">
      <h3 class="font-semibold">Payload</h3>
      <div
        class="flex items-center justify-between rounded-md bg-zinc-300 p-4 dark:bg-zinc-700"
      >
        <pre id="jwt-payload" class="json-viewer"></pre>
        <button
          data-copy-target="jwt-payload"
          class="copy-button dark:fill-pearl dark:hover:fill-pearl/50 group relative shrink-0 cursor-pointer! fill-zinc-950 hover:fill-zinc-950/50"
        >
          <span
            class="dark:bg-pearl text-pearl absolute bottom-0 left-1/2 z-10 hidden -translate-x-1/2 -translate-y-full items-center justify-center rounded-md bg-zinc-500 px-4 py-2 font-semibold uppercase group-hover:flex dark:text-black"
            >Copy</span
          >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 -960 960 960"
            class="size-6"
          >
            <path
              d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"
            />
          </svg>
        </button>
      </div>
    </div>

    <div class="flex flex-col gap-2">
      <h3 class="font-semibold">Signature</h3>
      <div
        class="flex items-center justify-between rounded-md bg-zinc-300 p-4 dark:bg-zinc-700"
      >
        <pre id="jwt-signature" class="json-viewer"></pre>
        <button
          data-copy-target="jwt-signature"
          class="copy-button dark:fill-pearl dark:hover:fill-pearl/50 group relative shrink-0 cursor-pointer! fill-zinc-950 hover:fill-zinc-950/50"
        >
          <span
            class="dark:bg-pearl text-pearl absolute bottom-0 left-1/2 z-10 hidden -translate-x-1/2 -translate-y-full items-center justify-center rounded-md bg-zinc-500 px-4 py-2 font-semibold uppercase group-hover:flex dark:text-black"
            >Copy</span
          >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 -960 960 960"
            class="size-6"
          >
            <path
              d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"
            />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    $("#parse-jwt").click(() => {
      const jwtToken = $("#jwt-token").val();
      const headerElement = $("#jwt-header");
      const payloadElement = $("#jwt-payload");
      const signatureElement = $("#jwt-signature");

      if (!jwtToken) {
        headerElement.text('{ "error": "Please enter a JWT." }');
        payloadElement.text("");
        signatureElement.text("");
        return;
      }

      const parts = jwtToken.split(".");
      if (parts.length !== 3) {
        headerElement.text('{ "error": "Invalid JWT format." }');
        payloadElement.text("");
        signatureElement.text("");
        return;
      }

      try {
        const headerBase64 = parts[0];
        const payloadBase64 = parts[1];
        const signatureBase64 = parts[2];

        const headerJson = JSON.stringify(
          JSON.parse(atob(headerBase64)),
          null,
          2,
        );
        const payloadJson = JSON.stringify(
          JSON.parse(atob(payloadBase64)),
          null,
          2,
        );

        headerElement.text(headerJson);
        payloadElement.text(payloadJson);
        signatureElement.text(signatureBase64);
      } catch (error) {
        headerElement.text('{ "error": "Error parsing JWT." }');
        payloadElement.text("");
        signatureElement.text(parts[2] || ""); // Show the signature part even if parsing fails
        console.error("JWT Parsing Error:", error);
      }
    });

    $(".copy-button").click(function () {
      const targetId = $(this).data("copy-target");
      const textToCopy = $("#" + targetId).text();

      if (navigator.clipboard) {
        navigator.clipboard
          .writeText(textToCopy)
          .then(() => {
            const span = $(this).find("span");
            span.text("Copied!");
            setTimeout(() => {
              span.text("Copy");
            }, 3000);
          })
          .catch((err) => {
            console.error("Failed to copy text: ", err);
          });
      } else {
        // Fallback for browsers that don't support clipboard API
        const tempInput = $("<textarea>");
        $("body").append(tempInput);
        tempInput.val(textToCopy).select();
        document.execCommand("copy");
        tempInput.remove();
        const span = $(this).find("span");
        span.text("Copied! (Fallback)");
        setTimeout(() => {
          span.text("Copy");
        }, 3000);
      }
    });
  });
</script>
