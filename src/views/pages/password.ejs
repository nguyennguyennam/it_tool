<script src="https://cdnjs.cloudflare.com/ajax/libs/chance/1.1.11/chance.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<div class="font-poppins flex flex-col gap-4 p-8">
  <h1 class="font-poppins mb-4 text-center text-3xl font-bold">
    Password Generator
  </h1>
  <p class="text-center text-balance">
    Generate a strong and secure password with customizable options.
  </p>

  <div class="mb-4">
    <label for="passwordLength" class="mb-2 block text-sm font-semibold"
      >Password Length:</label
    >
    <div class="relative">
      <input
        id="passwordLength"
        type="range"
        min="8"
        max="32"
        value="16"
        class="h-3 w-full cursor-pointer appearance-none rounded-lg bg-gray-200 focus:ring-2 focus:ring-indigo-500 focus:outline-none"
      />

      <output
        id="rangeValue"
        class="bg-cotton-candy pointer-events-none absolute -top-8 left-1/2 rounded-md px-2 py-1 text-sm font-semibold text-black opacity-0 transition-opacity duration-150"
        >16</output
      >
    </div>
  </div>

  <div class="mb-4 grid grid-cols-2 gap-4">
    <div>
      <input
        type="checkbox"
        id="includeUppercase"
        checked
        class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
      />
      <label for="includeUppercase" class="ml-2 text-sm"
        >Include Uppercase</label
      >
    </div>
    <div>
      <input
        type="checkbox"
        id="includeLowercase"
        checked
        class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
      />
      <label for="includeLowercase" class="ml-2 text-sm"
        >Include Lowercase</label
      >
    </div>
    <div>
      <input
        type="checkbox"
        id="includeNumbers"
        checked
        class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
      />
      <label for="includeNumbers" class="ml-2 text-sm">Include Numbers</label>
    </div>
    <div>
      <input
        type="checkbox"
        id="includeSymbols"
        class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"
      />
      <label for="includeSymbols" class="ml-2 text-sm">Include Symbols</label>
    </div>
  </div>

  <div class="mb-4">
    <label for="generatedPassword" class="mb-2 block text-sm font-semibold"
      >Generated Password:</label
    >
    <div class="relative">
      <input
        type="text"
        id="generatedPassword"
        value="Click 'Generate' to create a password"
        class="w-full rounded-md border px-3 py-2 pr-10 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none"
        readonly
      />
      <button
        id="copyButton"
        class="absolute inset-y-0 right-0 flex cursor-pointer items-center px-3 focus:outline-none"
        title="Copy to clipboard"
        onclick="copyPassword()"
      >
        <svg
          xmlns="https://www.svgrepo.com/svg/3110/copy"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          class="h-5 w-5"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002-2h2a2 2 0 002 2m-2 2h2m-2-2h2m-2 4h2m-2-2h2m-2-2h2m-2-2h2"
          />
        </svg>
        <div
          id="copy_password_text"
          class="pointer-events-none absolute bottom-0 left-1/2 -translate-x-1/2 -translate-y-full rounded-md bg-gray-800 px-2 py-1 text-xs text-white opacity-0 transition-opacity duration-200"
        >
          Copy Password
        </div>
      </button>
    </div>
  </div>

  <button
    onclick="generatePassword()"
    class="bg-cotton-candy hover:bg-cadillac cursor-pointer! rounded-xl px-4 py-2 font-bold text-black"
  >
    Generate Password
  </button>

  <div id="passwordStrength" class="mt-4 text-center text-sm"></div>
</div>

<style>
  /* Styling for the tooltip */
  #rangeValue {
    opacity: 0;
    transition: opacity 0.15s ease-in-out;
  }

  #passwordLength {
    background: linear-gradient(
      to right,
      #be5985 0% var(--password-length),
      var(--color-zinc-300) var(--password-length) 100%
    );
  }

  .dark #passwordLength {
    background: linear-gradient(
      to right,
      #ffb8e0 0% var(--password-length),
      var(--color-zinc-700) var(--password-length) 100%
    );
  }

  #passwordLength:focus + #rangeValue,
  #passwordLength:hover + #rangeValue {
    opacity: 1;
  }
</style>

<script>
  function setPercentage() {
    const el = $("#passwordLength");
    const percent =
      (el.val() - el.attr("min")) / (el.attr("max") - el.attr("min"));

    $("#passwordLength").css("--password-length", `${percent * 100}%`);
  }

  $("#passwordLength").on("input", setPercentage);
  setPercentage();

  function generatePassword() {
    const $passwordLengthInput = $("#passwordLength");
    const $includeUppercase = $("#includeUppercase");
    const $includeLowercase = $("#includeLowercase");
    const $includeNumbers = $("#includeNumbers");
    const $includeSymbols = $("#includeSymbols");
    const $generatedPasswordInput = $("#generatedPassword");
    const $passwordStrength = $("#passwordStrength");

    const length = parseInt($passwordLengthInput.val());
    const uppercase = $includeUppercase.prop("checked");
    const lowercase = $includeLowercase.prop("checked");
    const numbers = $includeNumbers.prop("checked");
    const symbols = $includeSymbols.prop("checked");

    let characters = "";
    if (uppercase) characters += "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    if (lowercase) characters += "abcdefghijklmnopqrstuvwxyz";
    if (numbers) characters += "0123456789";
    if (symbols) characters += "!@#$%^&*()_+=-`~[]\\{}|;':\",./<>?";

    if (!characters) {
      $generatedPasswordInput.val("Please select at least one option.");
      $passwordStrength.text("");
      return;
    }

    let password = "";
    for (let i = 0; i < length; i++) {
      password += chance.character({ pool: characters });
    }

    $generatedPasswordInput.val(password);
    updatePasswordStrength(password);
  }
  function copyPassword() {
    const $generatedPasswordInput = $("#generatedPassword");
    const $copyButton = $("#copyButton");
    const $copyPasswordText = $("#copy_password_text");
    const password = $generatedPasswordInput.val();

    if (password === "Click 'Generate' to create a password") {
      alert("Please generate a password first!");
      return;
    }
    navigator.clipboard
      .writeText(password)
      .then(() => {
        $copyPasswordText.text("Copied!").removeClass("opacity-0");
        setTimeout(() => {
          $copyPasswordText.addClass("opacity-0");
        }, 1500);
      })
      .catch((err) => {
        console.error("Error copying password: ", err);
        $copyPasswordText.text("Copy Failed!");
        setTimeout(() => {
          $copyPasswordText.addClass("opacity-0");
        }, 1500);
      });
  }

  function updatePasswordStrength(password) {
    const $passwordStrength = $("#passwordStrength");
    let strength = "";
    let colorClass = "";
    if (password.length < 8) {
      strength = "Too short";
      colorClass = "dark:text-rose-300 text-rose-600";
    } else if (password.length < 12) {
      strength = "Weak";
      colorClass = "text-orange-600 dark:text-yellow-400";
    } else if (password.length < 16) {
      strength = "Medium";
      colorClass = "text-emerald-600 dark:text-emerald-300";
    } else {
      strength = "Strong";
      colorClass = "text-emerald-600 dark:text-emerald-300 font-semibold";
    }
    $passwordStrength
      .text(`Strength: ${strength}`)
      .removeClass(
        "text-rose-600 dark:text-rose-300 text-gold-800 dark:text-yellow-400 text-green-500 text-emerald-600 dark:text-emerald-300 font-semibold",
      )
      .addClass(colorClass);
  }

  $(document).ready(function () {
    const $passwordLengthInput = $("#passwordLength");
    const $rangeValueOutput = $("#rangeValue");
    const $copyButton = $("#copyButton");
    const $copyPasswordText = $("#copy_password_text");

    function updateTooltip(input) {
      const $input = $(input);
      $rangeValueOutput.text($input.val());

      const value = parseInt($input.val());
      const min = parseInt($input.prop("min")) || 0;
      const max = parseInt($input.prop("max")) || 100;

      const thumbPosition = (value - min) / (max - min);
      const outputWidth = $rangeValueOutput.outerWidth();
      const inputWidth = $input.outerWidth();
      const thumbOffset = thumbPosition * (inputWidth - 16); // Approximate thumb width
      const outputOffset = thumbOffset - outputWidth / 2 + 8; // Adjustment for centering

      $rangeValueOutput.css("left", outputOffset + "px");
    }

    // Initialize tooltip position on load
    updateTooltip($passwordLengthInput[0]); // Pass the DOM element

    $passwordLengthInput.on("input", function () {
      updateTooltip(this);
    });

    $copyButton.on("mouseenter", function () {
      $copyPasswordText.text("Copy Password").removeClass("opacity-0");
    });

    $copyButton.on("mouseleave", function () {
      $copyPasswordText.addClass("opacity-0");
    });
  });
</script>
