<div class="flex w-full max-w-4xl flex-col items-center justify-center gap-8">
  <div class="flex w-full flex-col gap-2 py-4 text-center">
    <h1
      class="dark:from-cotton-candy dark:to-cadillac from-cadillac to-bashful bg-gradient-to-r bg-clip-text text-3xl font-bold text-transparent"
    >
      Image Encoder
    </h1>
    <p class="w-full">Encode an image into a string of base64-encoded data.</p>
  </div>

  <div class="flex w-full flex-col gap-4">
    <label
      for="image-input"
      class="flex cursor-pointer flex-col gap-2 font-semibold"
    >
      Select Image
      <input type="file" id="image-input" accept="image/*" class="hidden" />
      <div
        id="image-input-trigger"
        class="rounded-md border-2 border-dashed border-gray-300 bg-gray-200 p-4 text-center dark:border-gray-700 dark:bg-gray-800"
      >
        <span class="text-gray-600 dark:text-gray-400"
          >Click to select an image</span
        >
      </div>
      <img
        id="image-preview"
        src="#"
        alt="Image Preview"
        class="image-preview"
      />
    </label>

    <button
      id="encode-button"
      class="from-cadillac to-bashful dark:from-cotton-candy dark:to-cadillac text-pearl cursor-pointer self-end rounded-md bg-gradient-to-r px-4 py-2 font-semibold duration-200 hover:bg-transparent dark:border-orange-500 dark:text-black dark:hover:bg-transparent"
    >
      Encode Image
    </button>
  </div>

  <div class="flex w-full flex-col gap-4">
    <h2 class="text-xl font-semibold">Base64 Output</h2>
    <div
      class="flex items-center justify-between rounded-md bg-zinc-300 dark:bg-zinc-700"
    >
      <textarea
        id="base64-output"
        readonly
        class="w-full resize-none px-4 py-2 font-mono text-sm outline-none dark:bg-zinc-700 dark:text-white"
        placeholder="Base64 encoded string will appear here"
        rows="5"
      ></textarea>
      <button
        id="copy-button"
        class="dark:fill-pearl dark:hover:fill-pearl/50 group relative ml-2 shrink-0 cursor-pointer! fill-zinc-950 hover:fill-zinc-950/50"
      >
        <span
          class="dark:bg-pearl text-pearl absolute right-1/2 bottom-0 left-auto z-10 hidden -translate-y-full items-center justify-center rounded-md bg-zinc-500 px-4 py-2 font-semibold uppercase group-hover:flex dark:text-black"
          >Copy</span
        >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 -960 960 960"
          class="size-6"
        >
          <path
            d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z"
          />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    const imageInput = $("#image-input");
    const imagePreview = $("#image-preview");
    const encodeButton = $("#encode-button");
    const base64Output = $("#base64-output");
    const copyButton = $("#copy-button");
    const imageInputTrigger = $("#image-input-trigger");

    let selectedImage = null;

    imageInputTrigger.on("click", function () {
      imageInput.click();
    });

    imageInput.on("change", function (e) {
      const file = e.target.files[0];
      const reader = new FileReader();

      reader.onload = function (event) {
        imagePreview.attr("src", event.target.result);
        imagePreview.removeClass("hidden").addClass("visible");
        selectedImage = event.target.result;
      };

      if (file) {
        reader.readAsDataURL(file);
      } else {
        imagePreview.addClass("hidden").removeClass("visible");
        selectedImage = null;
      }
    });

    encodeButton.on("click", function () {
      if (!selectedImage) {
        base64Output.val("No image selected!");
        return;
      }

      base64Output.val(selectedImage);
    });

    copyButton.on("click", function () {
      const textToCopy = base64Output.val();
      if (textToCopy) {
        navigator.clipboard
          .writeText(textToCopy)
          .then(() => {
            const span = $(this).find("span");
            span.text("Copied!");
            setTimeout(() => {
              span.text("Copy");
            }, 3000);
          })
          .catch((err) => {
            console.error("Failed to copy text: ", err);
          });
      }
    });
  });
</script>
